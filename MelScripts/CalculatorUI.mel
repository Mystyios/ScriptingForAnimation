proc float addNumbers (float $input[])
{
    float $temp = 0; 
    for ($i = 0; $i < size($input); $i++)
    {
        $temp += $input[$i];
    }
    return $temp;
}

proc float subtractNumbers (float $input[])
{
    float $temp = $input[0];
    for ($i = 1; $i < size($input); $i++)
    {
        $temp -= $input[$i];
    }
    return $temp;
}

proc float multiplyNumbers (float $input[])
{
    float $temp = $input[0]; 
    for ($i = 1; $i < size($input); $i++)
    {
        $temp *= $input[$i];
    }
    return $temp;
}

proc float divideNumbers (float $input[])
{
    float $temp = $input[0]; 
    for ($i = 1; $i < size($input); $i++)
    {
        $temp /= $input[$i];
    }
    return $temp;
}

proc float powerNumbers (float $input[])
{
    float $temp = $input[0];
    if ($input[1] == 0)
    {
        $temp = 1;
    }
    else
    {
        for ($i = 1; $i < $input[1]; $i++)
        {
        $temp *= $input[0];
        }
    } 
    
    return $temp;
}

proc float meanNumbers (float $input[])
{
    float $temp = addNumbers($input) / size($input); 
    return $temp;
}

proc float medianNumbers (float $input[])
{
    float $tempArray[] = `sort $input`;
    float $temp;
    if (size($tempArray) % 2 == 0)
    {
        $temp = meanNumbers({$tempArray[size($input)/2], $tempArray[size($input)/2 - 1]});
    }
    else
    {
        $temp = $tempArray[(size($input)/ 2)];
    }
    return $temp;
}

proc string Calculator (float $input[], string $operation)
{
    float $result;
    
    switch ($operation)
    {
        case "Addition":
            $result = addNumbers($input);
            break;
        case "Subtraction":
            $result = subtractNumbers($input);
            break;
        case "Multiplication":
            $result = multiplyNumbers($input);
            break;
        case "Division":
            $result = divideNumbers($input);
            break;
        case "Power":
            $result = powerNumbers($input);
            break;
        case "Mean":
            $result = meanNumbers($input);
            break;
        case "Median":
            $result = medianNumbers($input);
            break;
    }

    string $printString = "The " + $operation + " result of ";
    for ($i = 0; $i < size($input); $i++)
    {
        $printString += ($input[$i] + ", ");
    }
    $printString += ("is " + $result);

    return $printString;
}

global proc doCalculations()
{
    string $finalResult;
    string $field1 = `optionVar -q "Numbers"`;
    string $floatString = `textField -q -text $field1`;
    
    string $operationField = `optionVar -q "menuOperation"`;
    string $selectedOperation = `optionMenu -q -value $operationField`;

    string $resultField = `optionVar -q "resultTextField"`;
    

    string $tempString;
    float $floatArray[] = {};

    int $start = 1;
    int $length = size($floatString);
    int $appendIndex = 0;
    // Loop through the string to find commas
    for ($i = 1; $i <= $length; $i++) {
        // Check if the current character is a comma
        if (`substring $floatString ($i) ($i)` == ",") {
            // Extract the substring from the start index to the current index
            $tempString = `substring $floatString ($start) ($i - 1)`;
            // Convert to float and store in the array
            $floatArray[$appendIndex] = float($tempString);
            // Update the start index
            $start = $i + 1;
            $appendIndex += 1;
        }
        else if ($i == $length)
        {
            $tempString = `substring $floatString ($start) ($length)`;
            $floatArray[$appendIndex] = float($tempString);
        }
    }
    $finalResult = Calculator($floatArray, $selectedOperation);
    textField -e -text $finalResult $resultField;
}

string $mWindow = "CalculatorWindow";

if (`window -exists $mWindow`)
    deleteUI $mWindow;

$mWindow = `window -height 300
                    -title "Calculator Tool"
                    -sizeable 1
                    -width 400
                    $mWindow`;
string $mColumn = `columnLayout -adjustableColumn 1
                                -parent $mWindow`;
rowLayout -numberOfColumns 2 -adjustableColumn 2 -parent $mColumn;
text "Numbers to Operate";
optionVar -stringValue "Numbers" `textField myTextField`;
rowLayout -numberOfColumns 2 -adjustableColumn 2 -parent $mColumn;
string $menu = `optionMenu -label "Operations" -changeCommand "string $selected = `optionMenu -q -value $menu`"`;
            menuItem -label "Addition";
            menuItem -label "Subtraction";
            menuItem -label "Multiplication";
            menuItem -label "Division";
            menuItem -label "Power";
            menuItem -label "Mean";
            menuItem -label "Median";
optionVar -stringValue "menuOperation" $menu;
button -parent $mColumn -label "Calculate" -command doCalculations;
rowLayout -numberOfColumns 2 -adjustableColumn 2 -parent $mColumn;
text "Result:";
optionVar -stringValue "resultTextField" `textField -editable false`;
showWindow $mWindow;

/*
I'm sorry, I know my code is a mess and will probably give you a headache
if you try to understand what is going on. It was a long and confusing process
to get here. After serveral hours of research and consulting with chatGPT
this is the glorious result. The point is that despite how it looks it works.

Anyway in order to use the program just run it in maya, then in the text field enter what
numbers you whish to calculate seperated only by commas
Example: 3.5,4.62,9.8
Then select your operation type in the drop down selection field
Hit calculate
Hooray!

Thank you for your time.
*/